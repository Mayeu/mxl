#! /usr/bin/env sh

# "Unofficial strict mode" http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

# Initial value for the options
aflag=0
rflag=0

while getopts ":har" opt; do
  case "$opt" in
    a)
      aflag=1
      ;;
    r)
      rflag=1
      ;;
    h|*)
      echo "You should not use this like that."
      exit 0
      ;;
  esac
done

# Some setup
############

_formail="formail"
email=''
email_path=$(mktemp)

# Read the whole e-mail
while IFS= read -r line
do
  echo "$line" >> ${email_path}
done
IFS=$'\n\t'

email=$(cat "$email_path")

# Exit trap
finish() {
  # All print the e-mail again
  echo "$email"
  rm -rf ${email_path}
}

trap finish EXIT

# Print error
err() {
  echo "error: $@. The e-mail has not been modified." >&2
}

# Sanity test, so $aflag and $rflag should always be different
test $aflag -eq $rflag && {
  err "You must provide exactly one of the -a or -d option"
  exit 1
}

# shift to the argument
shift $((OPTIND-1))
readonly LABEL=$@

# Get current label
get_current_label() {
  cat "$email_path"         |
  $_formail -x X-Label      |
  sed -e 's/^[[:space:]]//' |
  sed -e 's/[[:space:]]$//'
}

# Add a label
add_label_to_mail() {
  local current_labels=$(get_current_label)
  if test -z "$current_labels"
  then
    new_labels="${LABEL}"
  else
    # If there is already some label, check if we already have one somewhere.
    # Two case possible:
    # - <LABEL><SPACE>
    # - <LABEL><EOL>
    if test -z $(echo "$current_labels" | grep -e "${LABEL} " -e "${LABEL}$");
    then
      new_labels="${current_labels} ${LABEL}"
    else
      new_labels="${current_labels}"
    fi
  fi

  $_formail -fI "X-Label: ${new_labels}" < "$email_path"
}

if test $aflag -eq 1
then
  email=$(add_label_to_mail)
fi

if test $rflag -eq 1
then
  exit 1
fi
